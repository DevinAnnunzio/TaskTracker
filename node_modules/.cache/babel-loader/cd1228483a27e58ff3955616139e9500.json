{"ast":null,"code":"var _jsxFileName = \"/Users/Devin/Desktop/CCImmersive25/ReactTutorials/task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport { useState, useEffect } from 'react';\nimport AddTask from \"./components/AddTask\"; //create a list using map for the data\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false); //state is immutable, you recreate it and send it down\n  //state should be at the top level so we can use in other components\n  //If it is in a lower component, can only be used in the components children\n\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const response = await fetch(\"http://localhost:5000/tasks\");\n      const data = await response.json();\n      console.log(data);\n    };\n\n    fetchTasks();\n  }, []); //add task\n\n  const addTask = task => {\n    console.log(task); //Create a special id for a task\n\n    const id = Math.floor(Math.random() * 10000) + 1; //create a new task with the id and incoming task info\n\n    const newTask = {\n      id,\n      ...task\n    };\n    console.log(newTask); //add new task to tasks list\n\n    setTasks([...tasks, newTask]);\n  }; //delete a task\n\n\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle reminder\n\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      showAdd: showAddTask,\n      onAdd: () => setShowAddTask(!showAddTask),\n      title: \"Hello from App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 27\n    }, this) : \"No tasks to show\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n} //rafce for auto fill boiler plate code\n\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Devin/Desktop/CCImmersive25/ReactTutorials/task-tracker/src/App.js"],"names":["Header","Tasks","useState","useEffect","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","fetchTasks","response","fetch","data","json","console","log","addTask","task","id","Math","floor","random","newTask","deleteTask","filter","toggleReminder","map","reminder","length"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CACA;;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,KAAD,CAA9C,CAFa,CAGb;AACA;AACA;;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,UAAU,GAAG,YAAW;AAC5B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD,KAJD;;AAKAH,IAAAA,UAAU;AACX,GAPQ,EAON,EAPM,CAAT,CARa,CAiBb;;AACA,QAAMO,OAAO,GAAIC,IAAD,IAAU;AACxBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ,EADwB,CAExB;;AACA,UAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,IAAqC,CAAhD,CAHwB,CAKxB;;AACA,UAAMC,OAAO,GAAG;AAACJ,MAAAA,EAAD;AAAK,SAAGD;AAAR,KAAhB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYO,OAAZ,EAPwB,CAQxB;;AACAd,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWe,OAAX,CAAD,CAAR;AACD,GAVD,CAlBa,CA8Bb;;;AACA,QAAMC,UAAU,GAAIL,EAAD,IAAQ;AACzBV,IAAAA,QAAQ,CAACD,KAAK,CAACiB,MAAN,CAAcP,IAAD,IAAWA,IAAI,CAACC,EAAL,KAAYA,EAApC,CAAD,CAAR;AACD,GAFD,CA/Ba,CAmCb;;;AACA,QAAMO,cAAc,GAAIP,EAAD,IAAQ;AAC7BV,IAAAA,QAAQ,CAACD,KAAK,CAACmB,GAAN,CAAWT,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAZ,GAAiB,EAAC,GAAGD,IAAJ;AAAUU,MAAAA,QAAQ,EAAE,CAACV,IAAI,CAACU;AAA1B,KAAjB,GAAuDV,IAA3E,CAAD,CAAR;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BAEE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAIZ,WAAnB;AAAgC,MAAA,KAAK,EAAG,MAAMC,cAAc,CAAC,CAACD,WAAF,CAA5D;AAA4E,MAAA,KAAK,EAAC;AAAlF;AAAA;AAAA;AAAA;AAAA,YAFF,EAIGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAIW;AAAlB;AAAA;AAAA;AAAA;AAAA,YAJlB,EAMGT,KAAK,CAACqB,MAAN,GAAe,CAAf,gBAAmB,QAAC,KAAD;AAAO,MAAA,KAAK,EAAIrB,KAAhB;AAAuB,MAAA,QAAQ,EAAIgB,UAAnC;AAA+C,MAAA,QAAQ,EAAIE;AAA3D;AAAA;AAAA;AAAA;AAAA,YAAnB,GAAkG,kBANrG;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,C,CAED;;;GApDSrB,G;;KAAAA,G;AAsDT,eAAeA,GAAf","sourcesContent":["import Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport { useState, useEffect } from 'react';\nimport AddTask from \"./components/AddTask\";\n//create a list using map for the data\n\n\nfunction App() {\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  //state is immutable, you recreate it and send it down\n  //state should be at the top level so we can use in other components\n  //If it is in a lower component, can only be used in the components children\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const fetchTasks = async() => {\n      const response = await fetch(\"http://localhost:5000/tasks\")\n      const data = await response.json()\n      console.log(data);\n    }\n    fetchTasks()\n  }, [])\n  \n  //add task\n  const addTask = (task) => {\n    console.log(task)\n    //Create a special id for a task\n    const id = Math.floor(Math.random() * 10_000) + 1\n\n    //create a new task with the id and incoming task info\n    const newTask = {id, ...task}\n    console.log(newTask)\n    //add new task to tasks list\n    setTasks([...tasks, newTask])\n  }\n\n  //delete a task\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => (task.id !== id)))\n  }\n\n  //Toggle reminder\n  const toggleReminder = (id) => {\n    setTasks(tasks.map((task) => task.id === id ? {...task, reminder: !task.reminder} : task))\n  }\n\n  return (\n    <div className=\"container\">\n      {/* set value opposite of what it is(!) */}\n      <Header showAdd = {showAddTask} onAdd ={() => setShowAddTask(!showAddTask)} title=\"Hello from App\" />\n      {/* ternary without else is && */}\n      {showAddTask && <AddTask onAdd = {addTask}/>}\n      {/* //pass tasks in as a prop into Tasks component*/}\n      {tasks.length > 0 ? <Tasks tasks = {tasks} onDelete = {deleteTask} onToggle = {toggleReminder}/> : \"No tasks to show\"}\n    </div>\n  );\n}\n\n//rafce for auto fill boiler plate code\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}