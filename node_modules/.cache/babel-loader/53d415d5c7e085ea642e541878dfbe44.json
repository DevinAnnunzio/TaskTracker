{"ast":null,"code":"var _jsxFileName = \"/Users/Devin/Desktop/CCImmersive25/ReactTutorials/task-tracker/src/components/Header.js\";\nimport React from 'react';\nimport Button from './Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Header = _ref => {\n  let {\n    title,\n    onAdd,\n    showAdd\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"header\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: showAdd ? 'Red' : 'Green',\n      text: showAdd ? 'Close' : 'Add',\n      myClick: onAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}; //To handle default props passed in\n\n\n_c = Header;\nHeader.defaultProps = {\n  title: 'DEFAULT STUFF'\n};\nexport default Header; //----------------------------------------------------------------------------\n//TAKING AND USING PROPS\n//Can take in props and declare them this way as well\n// const Header = (props) => {\n//     return (\n//         <header>\n//             <h1>{props.title}</h1>\n//         </header>\n//     );\n// };\n//Prop types for better code\n//type impt for import PropTypes from 'prop-types'; at the top\n//----------------------------------------------------------------------------\n//PROP TYPES TO REQUIRE FROM PROP\n//It will still render if given a number but will give a warning in the console.\n//can also chain .isRequired\n//So title: PropTypes.string.isRequired,\n// Header.propTypes = {\n//     title: PropTypes.string,\n// }\n//----------------------------------------------------------------------------\n//STYLING USUALLY THROUGH THE CSS FILE BUT CAN DO INSIDE THE ELEMENTS\n//DYNAMIC STYLING IS LIKE BELOW\n//<p style={{color: 'red', backgroundColor: 'black'}}>Hello</p>\n//OPTION 2 - create a const and apss it in like above, but only use single braces like this {headingStyle}\n// const headingStyle = {\n//     color: 'red', backgroundColor: 'black'\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/Devin/Desktop/CCImmersive25/ReactTutorials/task-tracker/src/components/Header.js"],"names":["React","Button","Header","title","onAdd","showAdd","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAGA,MAAMC,MAAM,GAAG,QAA6B;AAAA,MAA5B;AAACC,IAAAA,KAAD;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAA4B;AAExC,sBACI;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAAA,4BACI;AAAA,gBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAIE,OAAO,GAAG,KAAH,GAAW,OAAnC;AAA4C,MAAA,IAAI,EAAIA,OAAO,GAAG,OAAH,GAAa,KAAxE;AAA+E,MAAA,OAAO,EAAID;AAA1F;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CARD,C,CAUA;;;KAVMF,M;AAWNA,MAAM,CAACI,YAAP,GAAsB;AAClBH,EAAAA,KAAK,EAAE;AADW,CAAtB;AAKA,eAAeD,MAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport Button from './Button';\n\n\nconst Header = ({title, onAdd, showAdd}) => {\n    \n    return (\n        <header className='header'>\n            <h1>{title}</h1>\n            <Button color = {showAdd ? 'Red' : 'Green'} text = {showAdd ? 'Close' : 'Add'} myClick = {onAdd}/>\n        </header>\n    );\n};\n\n//To handle default props passed in\nHeader.defaultProps = {\n    title: 'DEFAULT STUFF',\n}\n\n\nexport default Header;\n\n//----------------------------------------------------------------------------\n//TAKING AND USING PROPS\n//Can take in props and declare them this way as well\n// const Header = (props) => {\n//     return (\n//         <header>\n//             <h1>{props.title}</h1>\n//         </header>\n//     );\n// };\n\n//Prop types for better code\n//type impt for import PropTypes from 'prop-types'; at the top\n\n//----------------------------------------------------------------------------\n//PROP TYPES TO REQUIRE FROM PROP\n//It will still render if given a number but will give a warning in the console.\n//can also chain .isRequired\n//So title: PropTypes.string.isRequired,\n// Header.propTypes = {\n//     title: PropTypes.string,\n// }\n\n//----------------------------------------------------------------------------\n//STYLING USUALLY THROUGH THE CSS FILE BUT CAN DO INSIDE THE ELEMENTS\n//DYNAMIC STYLING IS LIKE BELOW\n//<p style={{color: 'red', backgroundColor: 'black'}}>Hello</p>\n\n//OPTION 2 - create a const and apss it in like above, but only use single braces like this {headingStyle}\n// const headingStyle = {\n//     color: 'red', backgroundColor: 'black'\n// }\n\n"]},"metadata":{},"sourceType":"module"}